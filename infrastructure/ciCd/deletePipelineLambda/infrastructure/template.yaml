AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Create infrastructure for branch deployments

Resources:
  GetStacksLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GetStacksLambdaRole
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs
      Policies:
      - PolicyName: create-pipeline-lambda-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - iam:*
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/40k-auspex-roles-*"
          - Effect: Allow
            Action:
              - codebuild:DeleteProject
            Resource: !Sub "arn:aws:codebuild:us-east-1:${AWS::AccountId}:project/40k-auspex-*"
          - Effect: Allow
            Action:
              - codepipeline:*
            Resource: "*"
      
  GetStacksLamda:
   Type: AWS::Serverless::Function
   Properties:
    FunctionName: GetStacks
    Description: A lambda used to get stacks for lower environments to delete
    Handler: index.handler
    Role: !GetAtt GetStacksLambdaRole.Arn
    Runtime: nodejs16.x
    CodeUri: ../dist/getStacks
    AutoPublishAlias: live
    Timeout: 900

  DeleteStacksLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DeleteStacksLambdaRole
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs
      Policies:
      - PolicyName: create-pipeline-lambda-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - iam:*
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/40k-auspex-roles-*"
          - Effect: Allow
            Action:
              - codebuild:DeleteProject
            Resource: !Sub "arn:aws:codebuild:us-east-1:${AWS::AccountId}:project/40k-auspex-*"
          - Effect: Allow
            Action:
              - codepipeline:*
            Resource: "*"
  
  DeleteStacksLamda:
   Type: AWS::Serverless::Function
   Properties:
    FunctionName: DeleteStacks
    Description: A lambda used to delete stacks for lower environments
    Handler: index.handler
    Role: !GetAtt DeleteStacksLambdaRole.Arn
    Runtime: nodejs16.x
    CodeUri: ../dist/deleteStacks
    AutoPublishAlias: live
    Timeout: 900

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GetStacksLamda]]

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |
        {
          "Comment": "Gather and delete stacks for the given branch.",
          "StartAt": "GatherStacks",
          "States": {
            "GatherStacks: {
              "Type": "Task",
              "Resource": "${GetStacksLambda.Arn}",
              "Next": "DeleteStacks"
            },
            "DeleteStacks": {
              "Type": "Task",
              "Resource": "${DeleteStacksLambda.Arn}",
              "Retry": [{
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 5
              }],
              "Next": "Done"
            },
            "Done": {
              "Type": "Succeed"
            }
          }
        }