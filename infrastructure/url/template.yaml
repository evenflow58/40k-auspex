AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: The Monster of the Week site infrastructure

Parameters:
  DomainName:
    Type: String
    Default: monsterplaybook.rip
  HostedZoneId:
    Type: String
    Default: Z0953270AK2JGXA33JIB
  S3DnsName:
    Type: String
    Default: s3-website-us-east-1.amazonaws.com
  S3HostedZoneId:
    Type: String
    Default: Z3AQBSTGFYJSTF
  CloudFronCert:
    Type: String
    Default: arn:aws:acm:us-east-1:625961017727:certificate/edd15537-9b78-4e21-a100-9ce277ca42bf
  Stage:
    Type: String
    AllowedValues:
      - staging
      - production
    Default: staging

Mappings:
  AliasMap:
    staging:
      Alias: staging.monsterplaybook.rip
    production:
      Alias: monsterplaybook.rip

Resources:
  # CloudFrontOriginIdentity:
  #   Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
  #   Properties:
  #     CloudFrontOriginAccessIdentityConfig:
  #       Comment: 'monster of the week origin identity'

  # UiBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !ImportValue UiBucketName
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           # Principal: "*"
  #           Principal:
  #             AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}'
  #           Action: s3:GetObject
  #           Resource:
  #             Fn::Sub:
  #             - '${UiBucketArn}/*'
  #             - UiBucketArn: !ImportValue UiBucketArn

  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
      Path: /
      Policies:
        - PolicyName: EdgeLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
              - Action:
                  - lambda:EnableReplication*
                Effect: Allow
                Resource: '*'

  LambdaEdge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: index.js
      Role: !GetAtt LambdaEdgeRole.Arn
      Runtime: nodejs16.x
      Handler: index.handler
      Timeout: 5
      AutoPublishAlias: live

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !FindInMap [AliasMap, !Ref Stage, Alias]
        Origins:
          - DomainName: aws.amazon.com
            Id: lambdaEdgeId
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: match-viewer
        Enabled: true
        Comment: The monster of the week cloud front distribution
        DefaultCacheBehavior:
          TargetOriginId: lambdaEdgeId
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref LambdaEdge.Version
          ForwardedValues:
            QueryString: false
            Headers:
                - Origin
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: !Ref CloudFronCert
          SslSupportMethod: sni-only
  
  # DnsName:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     HostedZoneId: !Ref HostedZoneId
  #     RecordSets:
  #     - Name: !Ref DomainName
  #       Type: A
  #       AliasTarget:
  #         HostedZoneId: Z2FDTNDATAQYW2
  #         DNSName: !GetAtt CloudFrontDistribution.DomainName